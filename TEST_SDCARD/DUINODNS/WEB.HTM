<!DOCTYPE html>
<html>
<head>
	<title>duinodns</title>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<style>

#loading-screen {
	width: 100%;
	height: 100%;
	position: fixed;
	top: 0;
	left: 0;
	background: #030212;
	display: flex;
	align-items: center;
	justify-content: center;
	transition: opacity 1s ease-out;
	z-index: 99999;
	flex-direction: column;
}

#loading-screen.hidden {
	opacity: 0;
	pointer-events: none;
}

.lds-ripple {
  display: inline-block;
  position: relative;
  width: 80px;
  height: 80px;
}
.lds-ripple div {
  position: absolute;
  border: 4px solid #D1D4EE;
  opacity: 1;
  border-radius: 50%;
  animation: lds-ripple 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;
}
.lds-ripple div:nth-child(2) {
  animation-delay: -0.5s;
}
@keyframes lds-ripple {
  0% {
    top: 36px;
    left: 36px;
    width: 0;
    height: 0;
    opacity: 1;
  }
  100% {
    top: 0px;
    left: 0px;
    width: 72px;
    height: 72px;
    opacity: 0;
  }
}



#loading-screen span.spinner {
	width: 50px;
	height: 50px;
	display: block;
	border: 4px solid #D1D4EE;
	border-right: none;
	border-radius: 100%;
	border-bottom-right-radius: 0px;
	border-top-right-radius: 0px;

	opacity: .9;

	animation-name: xp;
	animation-duration: 1s;
	animation-iteration-count: infinite;
	animation-timing-function: linear;
}

@keyframes x {
	0% {
		transform: rotate(0deg);
	}
	50% {
		opacity: .4;
	}
	100% {
		transform: rotate(360deg);
	}
}

#boxes-wrapper {
	width: 100%;
	display: flex;
	align-items: stretch;
	justify-content: center;
}

#boxes-wrapper div.box-outer {
	flex-grow: 0;
	flex-shrink: 0;

	display: flex;
	flex-direction: column;

	width: 450px;
}

#boxes-wrapper div.box-outer h1.box-title {
	display: block;
	height: 40px;
}

#boxes-wrapper div.box {
	width: 100%;
	height: calc(100% - 40px);
	background: linear-gradient(30deg, #000000 0%, #030212 0%, #18172A 100%);
	border: 1px solid #242639;
	border-radius: 4px;


	box-shadow: 0 10px 7px 3px rgba(255,255,255,0.03);

	transition: box-shadow .25s ease, transform .25s ease-in-out;
	transform: scale(.992);
	padding: 15px 30px;
}

#boxes-wrapper div.box:hover {
	box-shadow: 0 10px 7px 3px rgba(255,255,255,0.03), 0 0 17px 3px rgba(255,255,255,0.06);
	transform: scale(1);
}

#boxes-wrapper div.box.bg-flipped {
	background: linear-gradient(-60deg, #000000 0%, #030212 0%, #18172A 100%);
}

div.box div.box-line {
	display: flex;
	align-items: center;
	justify-content: center;
	height: 40px;
}

div.box div.box-line h1,
div.box div.box-line span {
	display: block;
	font-size: 17px;
}

div.box div.box-line span {
	margin-left: auto;
	color: #7B80BC;
}

#boxes-wrapper div.spacer {
	width: 50px;
	height: 50px;
}



		@media only screen and (max-width: 1000px) {
			#app {
				width: 100% !important;
			}

			#app-header {
				flex-direction: column;
			}

			#app-header ul {
				margin: 0 !important;
				font-size: 21px;
			}

			#boxes-wrapper {
				flex-direction: column;
				align-items: center;
			}

			#boxes-wrapper div.box-outer {
				width: 100%;
			}

			#ddns_history {
				width: 450px;
				margin: 0 auto;
				display: none;
			}

			#ddns_history div.history-entry div:nth-child(3),
			#ddns_history div.history-entry div:nth-child(4) {
				display: none;
			}
		}







	* {
		padding: 0;
		margin: 0;
		box-sizing: border-box;
		font-family: Arial;
		color: #D1D4EE;
		font-weight: 400;
		cursor: default;
	}

	html, body {
		width: 100%;
		height: 100%;
		background: #030212;
		font-size: 17px;
	}

	h1 {
		font-size: 21px;
	}

	#app {
		width: 1000px;
		padding-top: 50px;
		padding-bottom: 50px;
		margin: 0 auto;
	}

	#app-header {
		width: 100%;
		display: flex;
		align-items: center;
		font-size: 24px;
		padding-bottom: 50px;
	}

	#app-header ul {
		/* make navigation stick to the right side */
		margin-left: auto;
		list-style: none;
		display: flex;
	}

	#app-header li {
		margin-left: 25px;
	}

	#app-header li:not(.active) {
		color: #7B80BC;
		opacity: .4;
	}



	#ddns_history {
		width: 100%;
		padding: 25px;
	}

	#ddns_history div.history-entries {
		display: flex;
		flex-direction: column;
	}

	#ddns_history div.history-entry {
		width: 100%;
		display: flex;
		padding: 5px 25px;
		transition: opacity .25s ease;
	}

	#ddns_history div.history-entry.resolved div:nth-child(1),
	#ddns_history div.history-entry.locally_resolved div:nth-child(1) {
		color: #5AD183;
	}

	#ddns_history div.history-entry.timeout div:nth-child(1) {
		color: #FF6839;
	}

	#ddns_history div.history-entry.head,
	#ddns_history div.history-entry.head div {
		font-size: 17px !important;
	}

	#ddns_history div.history-entry div:nth-child(3) {
		color: #7B80BC;
	}

	#ddns_history div.history-entry.unknown_ip div:nth-child(3) {
		opacity: 0.3;
	}

	#ddns_history div.history-entry.hide {
		opacity: 0;
	}

	#ddns_history div.history-entry div {
		width: 100%;
		display: flex;
		align-items: center;
	}

	#ddns_history div.history-entry div:nth-child(1) {
		width: 175px;
		flex-grow: 0;
		padding-right: 10px;
	}

	#ddns_history div.history-entry div:nth-child(2) {
		justify-content: flex-start;
	}

	#ddns_history div.history-entry div:nth-child(3) {
		justify-content: flex-end;
	}
	</style>
</head>
<body>

	<div id="loading-screen">
		<div class="lds-ripple"><div></div><div></div></div>
		<img src="./LOGO.PNG" height="125">
		<h1>Connecting ...</h1>
	</div>

	<div id="app">
		<div id="app-header">
			<img src="./LOGO.PNG" height="85">

			<ul>
				<li class="active">Overview</li>
				<li>Configuration</li>
				<li>DNS-Records</li>
			</ul>
		</div>


		<div id="boxes-wrapper">
			<div class="box-outer">
				<h1 class="box-title">Insights</h1>
				<div class="box">
					<div class="box-line">
						<h1>Queries (fulfilled / total)</h1>
						<span id="ddns_requests_total">-</span>
					</div>
					<div class="box-line">
						<h1>Reliability</h1>
						<span id="ddns_reliability">-</span>
					</div>
					<div class="box-line">
						<h1>Avg. Upstream Latency</h1>
						<span id="ddns_upstream_latceny">-</span>
					</div>
					<div class="box-line">
						<h1>Loaded DNS-Records</h1>
						<span id="ddns_loaded_dns_records">-</span>
					</div>
					<div class="box-line">
						<h1>Available Upstream Slots</h1>
						<span id="ddns_available_slots">-</span>
					</div>
					<div class="box-line">
						<h1>Uptime</h1>
						<span id="ddns_uptime">-</span>
					</div>
				</div>
			</div>
			<div class="spacer"></div>
			<div class="box-outer">
				<h1 class="box-title">Network</h1>
				<div class="box bg-flipped">
					<div class="box-line">
						<h1>MAC-Address</h1>
						<span id="ddns_mac_address">-</span>
					</div>

					<div class="box-line">
						<h1>Local Address</h1>
						<span id="ddns_ip_address">-</span>
					</div>
					<div class="box-line">
						<h1>Outgoing Port</h1>
						<span id="ddns_out_port">-</span>
					</div>
					<div class="box-line">
						<h1>Subnetmask</h1>
						<span id="ddns_netmask">-</span>
					</div>
					<div class="box-line">
						<h1>Gateway-IP</h1>
						<span id="ddns_gateway">-</span>
					</div>
					<div class="box-line">
						<h1>DNS-Upstream</h1>
						<span id="ddns_upstream">-</span>
					</div>
				</div>
			</div>
		</div>

		<div id="ddns_history">
			<h1 style="display: block;height: 40px">DNS-Query History</h1>

			<div class="history-entries">
			</div>
		</div>
	</div>

<script>

function pad(value) {
  return value.toString().padStart(2, "0")
}

function pluralize(unit, value) {
   if (value === 1) return `${value} ${unit}`
  
   return `${pad(value)} ${unit}s`
}

function formatUptime(seconds) {
    if (60 > seconds) {
      return `${pluralize("second", seconds)}`
    }
    
    let minutes = Math.floor(seconds / 60)
    seconds -= (minutes * 60)
    
    if (60 > minutes) {
      return `${pad(minutes)}m ${pad(seconds)}s`
    }
  
    let hours = Math.floor(minutes / 60)
    minutes -= (hours * 60)
    
    if (24 > hours) {
      return `${pad(hours)}h ${pad(minutes)}m ${pad(seconds)}s`
    }
  
    let days = Math.floor(hours / 24)
    hours -= (days * 24)
  
    return `${days}d ${pad(hours)}h ${pad(minutes)}m ${pad(seconds)}s`
}
function p(val, label) {
	if (val == 1) return label
	return `${label}s`
}

function parseHeader(line) {
	const [
		uptime,
		mac_address,
		address,
		netmask,
		gateway,
		upstream,
		upstream_port,
		listen_port,
		out_port,
		requests_served,
		requests_total,
		free_slots
	] = line.split("|")

	return {
		uptime: parseInt(uptime, 10),
		mac_address,
		address,
		netmask,
		gateway,
		upstream: `${upstream}:${upstream_port}`,
		listen_port: parseInt(listen_port, 10),
		out_port: parseInt(out_port, 10),
		requests_served: parseInt(requests_served, 10),
		requests_total: parseInt(requests_total, 10),
		free_slots: parseInt(free_slots, 10)
	}
}

function parseLogLine(log_line) {
	const [
		_index,
		label,
		type,
		status,
		requested_at,
		resolved_at,
		resolved_to
	] = log_line.split("|")

	return {
		label,
		type,
		status,
		requested_at: parseInt(requested_at, 10),
		resolved_at: parseInt(resolved_at, 10),
		resolved_to
	}
}

function updateUI(header, history) {
	const m = [
		["ddns_requests_total", header.requests_total],
		["ddns_uptime", header.uptime],
		["ddns_mac_address", header.mac_address],
		["ddns_ip_address", header.address],
		["ddns_netmask", header.netmask],
		["ddns_upstream", header.upstream],
		["ddns_gateway", header.gateway],
		["ddns_available_slots", header.free_slots],
		["ddns_out_port", header.out_port]
	]

	for (let i = 0; i < m.length; ++i) {
		const [id, val] = m[i]

		document.getElementById(id).innerText = val
	}

	document.getElementById("ddns_available_slots").innerText += " / 32"

	document.getElementById("ddns_uptime").innerText = formatUptime(
		header.uptime
	)

	let p = header.requests_served / header.requests_total

	p = Math.floor(p * 100)

	if (isNaN(p)) {
		document.getElementById("ddns_reliability").innerText = `-`
	} else {
		document.getElementById("ddns_reliability").innerText = `${p}%`
	}

	document.getElementById("ddns_requests_total").innerText = `${header.requests_served} / ${header.requests_total}`

	document.getElementById("ddns_ip_address").innerText = `${header.address}:${header.listen_port}`

	document.querySelector(".history-entries").innerHTML = `
		<div class="history-entry head">
			<div>Type</div>
			<div>Domain</div>
			<div>Resolved to</div>
		</div>`

	for (let i = 0; i < history.length; ++i) {
		const q = history[i]
		let tmp = ``, r = []

		r.push(q.status)

		if (q.resolved_to === "----") {
			r.push("unknown_ip")
			q.resolved_to = "No data to show"
		}

		if (q.type === "?") {
			r.push("hide")
		}

		tmp += `<div class="history-entry ${r.join(" ")}">`
		tmp += `    <div>${q.type}</div>`
		tmp += `    <div>${q.label}</div>`
		tmp += `    <div>${q.resolved_to}</div>`
		tmp += `</div>`

		document.querySelector(".history-entries").innerHTML += tmp
	}
}

function send(){
var xhr = new XMLHttpRequest();
xhr.open("POST", '/config', true);

xhr.setRequestHeader("Accept", "");
xhr.setRequestHeader("Accept-Encoding", "");
xhr.setRequestHeader("Content-Type", "");

//Send the proper header information along with the request
//xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

xhr.onreadystatechange = function() { // Call a function when the state changes.
    if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
        // Request finished. Do processing here.
    }
}
xhr.send(`mac_address,1:2:3:4:5:6
address,10.10.10.10
netmask,255.255.255.0
gateway,10.10.10.1
out_port,5324
listen_port,8853
upstream,1.1.1.1
upstream_port,53
upstream_timeout,125
local_ttl,30
config_lock,0
headless,0
debug,1
trace,0`);
}

/*
mac_address,1:2:3:4:5:6
address,10.10.10.10
netmask,255.255.255.0
gateway,10.10.10.1
out_port,5324
listen_port,8853
upstream,1.1.1.1
upstream_port,53
upstream_timeout,125
local_ttl,30
config_lock,0
headless,0
debug,1
trace,0
*/

function refresh() {
	const req = new XMLHttpRequest()
	return
	req.onreadystatechange = function() {
		if (this.readyState == this.HEADERS_RECEIVED) {
		} else if (this.readyState == 4) {
			const data = this.responseText.split("\n")
			const header = parseHeader(data.shift())

			const history = data.filter(line => {
				return line.trim().length
			}).map(parseLogLine)

			updateUI(header, history)

			console.log(header, history)

			setTimeout(() => {
				document.querySelector("#loading-screen").classList.add("hidden")
			}, 1000)

			setTimeout(refresh, 1500)
		}
	}

	req.open("GET", "/status", true);
	req.send()
}

refresh()
</script>
</body>
</html>
